import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ 
  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY || "" 
});

export async function generateText(prompt: string): Promise<string> {
  try {
    if (!prompt || prompt.trim().length === 0) {
      throw new Error("Prompt cannot be empty");
    }

    // Check if we should use mock responses (for development/testing only)
    const useMockAI = process.env.USE_MOCK_AI === "true";
    
    if (useMockAI) {
      console.log("Using mock AI responses (development mode)");
      // Mock response for testing MVP features
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay
      
      if (prompt.toLowerCase().includes("2+2") || prompt.toLowerCase().includes("2 + 2")) {
        return "The answer to 2 + 2 is 4. This is a basic arithmetic operation where we add two and two together.";
      }
      
      if (prompt.toLowerCase().includes("hello")) {
        return "Hello! I'm an AI assistant powered by Gemini. How can I help you today?";
      }
      
      if (prompt.toLowerCase().includes("poem") && prompt.toLowerCase().includes("coding")) {
        return "Here's a short poem about coding:\n\nLines of code dance on the screen,\nLogic flows like a pristine stream.\nBugs may hide in syntax deep,\nBut persistence makes solutions leap.\n\nFrom idea to execution bright,\nCoders craft with pure delight.";
      }
      
      return `Thank you for your message: "${prompt}". This is a mock response for testing purposes. In production, this would be generated by Google's Gemini AI.`;
    }

    // Production mode - require valid API key
    const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;
    if (!apiKey || apiKey.trim() === "") {
      throw new Error("Gemini API key is required. Please set GEMINI_API_KEY environment variable.");
    }

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
    });

    const result = response.text;
    
    if (!result || result.trim().length === 0) {
      throw new Error("No response generated from AI model");
    }

    return result;
  } catch (error: any) {
    console.error("Generate text error:", error);
    throw new Error(`Failed to generate response: ${error.message || "Unknown error"}`);
  }
}
